Routes -> 
       
       Route::get('send_meets',[passportAuthController::class,'sendMeetingInvitation']);

            => route "send_meets" is responsible to create a meeting link and send meeting link to the attendes.
            => sendMeetingInvitation is a public function of a class.
            => which takes "camp_data.json" as an input variable and find out the campaign id to send the meeting link.
            => in "sendMeetingInvitation" function it calls another function "runAPICall" to create an "curl" invitation link with the help of campaign id "cmp_id".

            function runAPICall(){}

            => here function "runAPICall" is responsible to create an "curl" with "cmp_id"/"campaign id".
            => function "runAPICall" takes "cmp_id" as argument and send it through body.
                
                https::body ->:: ex -> {
                                            "campId" : ["Cgg302nauiodhad", "adawd243dadaw", "dawdawd12e12ed"]
                                       }


 ************************************************************************* Code **********************************************************************************************

    public function sendMeetingInvitation(Request $request){
        try {

			$input = file_get_contents(base_path() . '/config/camp_data.json');
			$tempArray = json_decode($inpt, true);

			if(!empty($tempArray) && count($tempArray) >= 2){
				
				foreach($tempArray as $arr_key => $atte_arr){
					
					if ((isset($atte_arr[55555]) && $atte_arr[55555]) || (isset($atte_arr[666666]) && $atte_arr[666666])) {
						continue;
					}
					
					$del_flag = true;
					if(!empty($atte_arr)){
						foreach($atte_arr as $cu_data){
							if(!empty($cu_data)){
								foreach($cu_data as $cmp_id => $cmp_count){
									if($cmp_count && $cmp_count > 0){
										$respo_arr = $this->runAPICall($cmp_id);
										$respo_arr = json_decode($respo_arr);
										if($respo_arr[0]->error == true){
											$del_flag == false;
										}
									}
								}
							}
						}
					}
					
					##unset array here
					if(isset($tempArray[$arr_key]) && $del_flag == true){
						unset($tempArray[$arr_key]);

						## Append data to json file.
						$jsonData = json_encode($tempArray);
						file_put_contents(base_path() . '/config/camp_data.json', $jsonData);
					}
				}

				$data['id'] = 1;
				$data['error'] = false;
				$data['error_code'] = 'success';
				$data['error_message'] = 'cron is executed successfully.';
				return response()->json($data);

			}else{
				$data['id'] = 1;
				$data['error'] = true;
				$data['error_code'] = 'validation_error';
				$data['error_message'] = 'No data found for the request.';
				return response()->json($data);
			}
			
		} catch (\Throwable $th) {
			throw $th;
		}
    }

    public function runAPICall($camp_str = ''){
        try {
			$api_url= env('API_URL', 'https://dev.letscalendar.com/api/v1/sendmeeting');
			$curl = curl_init();
			curl_setopt_array($curl, array(
				CURLOPT_URL => "$api_url",
				CURLOPT_RETURNTRANSFER => true,
				CURLOPT_ENCODING => '',
				CURLOPT_MAXREDIRS => 10,
				CURLOPT_TIMEOUT => 0,
				CURLOPT_FOLLOWLOCATION => true,
				CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
				CURLOPT_CUSTOMREQUEST => 'POST',
				CURLOPT_POSTFIELDS =>'{
					"campId": "'.$camp_str.'"
				}',
				CURLOPT_HTTPHEADER => array(
					'bridge: 433276623d5cc0c8c9955b35eb2742d6',
					'Content-Type: application/json'
				),
			));
			
			$response = curl_exec($curl);
			curl_close($curl);
			return $response;
		} catch (\Throwable $th) {
			throw $th;
		}
    }

